import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';
import { AlertTriangle, FileText, HelpCircle, User, Download, Image as ImageIcon, Brain, X } from 'lucide-react';
import { User as UserType } from '../App';
import { getReportsByPatientId, MedicalReport } from '../utils/reportStorage';
import { UserDropdown } from './UserDropdown';
import { useTheme } from '../utils/themeContext';

interface PatientDashboardProps {
  user: UserType;
  onLogout: () => void;
  onNavigate: (destination: 'dashboard' | 'profile' | 'settings') => void;
}

const faqItems = [
  {
    question: 'What does my risk score mean?',
    answer: 'Risk scores are generated by our AI analysis system and help prioritize follow-up care. Low = routine monitoring, Medium = follow-up recommended, High = urgent attention needed.'
  },
  {
    question: 'How is the risk score calculated?',
    answer: 'Our advanced AI model analyzes your X-ray images using deep learning algorithms trained on thousands of medical images. The assessment is reviewed by radiologists to ensure accuracy.'
  },
  {
    question: 'How do I access my full report?',
    answer: 'Click "View Report" on any of your results to see the complete report image uploaded by your radiologist.'
  },
  {
    question: 'When will I get my results?',
    answer: 'Most X-ray results are available within 24-48 hours. Urgent cases are prioritized and may be available sooner.'
  },
  {
    question: 'What should I do if I have a high risk score?',
    answer: 'Contact your doctor immediately to discuss the results and determine the appropriate next steps for your care.'
  }
];

export function PatientDashboard({ user, onLogout, onNavigate }: PatientDashboardProps) {
  const { actualTheme } = useTheme();
  const isDarkMode = actualTheme === 'dark';
  const [reports, setReports] = useState<MedicalReport[]>([]);
  const [selectedReport, setSelectedReport] = useState<MedicalReport | null>(null);
  const [expandedFaq, setExpandedFaq] = useState<number | null>(null);

  useEffect(() => {
    // Load reports for this patient
    const patientReports = getReportsByPatientId(user.id);
    setReports(patientReports);
  }, [user.id]);

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'low': return 'bg-green-100 text-green-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'high': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getRiskIcon = (risk: string) => {
    if (risk === 'medium' || risk === 'high') {
      return <AlertTriangle className="h-4 w-4" />;
    }
    return null;
  };

  const getNextSteps = (risk: string) => {
    switch (risk) {
      case 'low':
        return 'Continue routine care with your primary physician. No immediate action required.';
      case 'medium':
        return 'Schedule a follow-up appointment with your doctor within 2-4 weeks to discuss findings.';
      case 'high':
        return 'Contact your doctor immediately to discuss results and determine urgent next steps.';
      default:
        return 'Please consult with your healthcare provider about these results.';
    }
  };

  return (
    <div className={`min-h-screen ${isDarkMode ? 'bg-gray-900' : 'bg-gray-50'} safe-area-inset`}>
      {/* Header */}
      <header className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-b mobile-header`}>
        <div className="flex-responsive max-w-7xl mx-auto">
          <div className="flex items-center space-responsive min-w-0 flex-1">
            <div className="avatar-responsive h-8 w-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0 touch-target">
              <User className="h-4 w-4 text-white" />
            </div>
            <div className="min-w-0">
              <h1 className={`font-semibold truncate text-fluid-lg ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Patient Portal</h1>
              <p className={`text-fluid-sm truncate ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Welcome, {user.name} (ID: {user.id})</p>
            </div>
          </div>
          <UserDropdown user={user} onLogout={onLogout} onNavigate={onNavigate} isDarkMode={isDarkMode} />
        </div>
      </header>

      <div className="p-responsive container-responsive mx-auto">
        <Tabs defaultValue="dashboard" className="space-responsive">
          <TabsList className={`grid w-full grid-cols-3 h-auto ${isDarkMode ? 'bg-gray-800' : 'bg-gray-100'}`}>
            <TabsTrigger value="dashboard" className="text-fluid-sm py-2 px-2 sm:px-4 touch-target">
              <span className="hidden sm:inline">Dashboard</span>
              <span className="sm:hidden">Home</span>
            </TabsTrigger>
            <TabsTrigger value="reports" className="text-fluid-sm py-2 px-2 sm:px-4 touch-target">
              <span className="hidden sm:inline">My Reports</span>
              <span className="sm:hidden">Reports</span>
            </TabsTrigger>
            <TabsTrigger value="faq" className="text-fluid-sm py-2 px-2 sm:px-4 touch-target">FAQ</TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard" className="space-responsive">
            {/* Health Summary Cards */}
            <div className="grid-responsive-3 grid grid-cols-1 sm:grid-cols-3">
              <Card className={`border-l-4 border-l-blue-500 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'}`}>
                <CardContent className="card-responsive-sm">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-xs sm:text-sm text-muted-foreground">Total Reports</p>
                      <p className="text-xl sm:text-2xl font-semibold">{reports.length}</p>
                    </div>
                    <FileText className="h-6 w-6 sm:h-8 sm:w-8 text-blue-500" />
                  </div>
                </CardContent>
              </Card>

              <Card className="border-l-4 border-l-green-500">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-xs sm:text-sm text-muted-foreground">Low Risk</p>
                      <p className="text-xl sm:text-2xl font-semibold text-green-600">
                        {reports.filter(r => r.riskScore === 'low').length}
                      </p>
                    </div>
                    <div className="h-6 w-6 sm:h-8 sm:w-8 bg-green-100 rounded-full flex items-center justify-center">
                      <div className="h-3 w-3 sm:h-4 sm:w-4 bg-green-500 rounded-full"></div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-l-4 border-l-amber-500">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-xs sm:text-sm text-muted-foreground">Needs Attention</p>
                      <p className="text-xl sm:text-2xl font-semibold text-amber-600">
                        {reports.filter(r => r.riskScore === 'medium' || r.riskScore === 'high').length}
                      </p>
                    </div>
                    <AlertTriangle className="h-6 w-6 sm:h-8 sm:w-8 text-amber-500" />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Recent Reports */}
            <Card>
              <CardHeader className="pb-4">
                <CardTitle className="text-lg sm:text-xl">Recent Reports</CardTitle>
                <CardDescription>Your latest X-ray results and assessments</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {reports.length === 0 ? (
                  <div className="text-center py-8 sm:py-12 text-muted-foreground">
                    <FileText className="h-8 w-8 sm:h-12 sm:w-12 mx-auto mb-3 opacity-50" />
                    <p className="text-sm sm:text-base">No reports available yet</p>
                    <p className="text-xs sm:text-sm mt-1">Your reports will appear here once uploaded by your radiologist</p>
                  </div>
                ) : (
                  reports.slice().reverse().map((report) => (
                    <div key={report.id} className="flex flex-col sm:flex-row items-start sm:items-center gap-4 p-3 sm:p-4 border rounded-lg">
                      <div className="flex items-center gap-3 sm:gap-4 flex-1 w-full">
                        <div className="h-16 w-16 sm:h-20 sm:w-20 bg-gray-100 rounded flex items-center justify-center overflow-hidden flex-shrink-0">
                          <img
                            src={report.reportImage}
                            alt="Report thumbnail"
                            className="h-full w-full object-cover"
                          />
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2">
                            <h3 className="font-medium truncate text-sm sm:text-base">{report.studyType || 'X-Ray Report'}</h3>
                            <div className="flex items-center gap-2 flex-wrap">
                              <Badge className={getRiskColor(report.riskScore)} size="sm">
                                {getRiskIcon(report.riskScore)}
                                <span className="ml-1 capitalize text-xs">{report.riskScore} Risk</span>
                              </Badge>
                              <Badge variant="outline" className="gap-1 text-xs">
                                <Brain className="h-3 w-3" />
                                <span className="hidden xs:inline">AI Assessed</span>
                                <span className="xs:hidden">AI</span>
                              </Badge>
                            </div>
                          </div>
                          <div className="text-xs sm:text-sm text-muted-foreground space-y-1">
                            <p className="truncate">
                              Uploaded on {new Date(report.uploadDate).toLocaleDateString()}{' '}
                              <span className="hidden sm:inline">
                                at {new Date(report.uploadDate).toLocaleTimeString()}
                              </span>
                            </p>
                            <p className="truncate">
                              Reviewed by Dr. {report.uploadedBy}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => setSelectedReport(report)}
                        className="w-full sm:w-auto flex-shrink-0"
                      >
                        <FileText className="h-4 w-4 sm:mr-2" />
                        <span className="text-xs sm:text-sm">View Report</span>
                      </Button>
                    </div>
                  ))
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="reports" className="space-y-3 sm:space-y-4">
            <div className="grid gap-4">
              {reports.length === 0 ? (
                <Card>
                  <CardContent className="text-center py-8 sm:py-12 text-muted-foreground">
                    <FileText className="h-8 w-8 sm:h-12 sm:w-12 mx-auto mb-3 opacity-50" />
                    <p className="text-sm sm:text-base">No reports available</p>
                    <p className="text-xs sm:text-sm mt-1">Your medical reports will appear here</p>
                  </CardContent>
                </Card>
              ) : (
                reports.map((report) => (
                  <Card key={report.id}>
                    <CardHeader className="pb-4">
                      <div className="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-4">
                        <div className="flex items-center gap-3 flex-1">
                          <CardTitle className="text-base sm:text-lg">{report.studyType || 'X-Ray Report'}</CardTitle>
                          <Badge className={getRiskColor(report.riskScore)} size="sm">
                            {getRiskIcon(report.riskScore)}
                            <span className="ml-1 capitalize text-xs">{report.riskScore} Risk</span>
                          </Badge>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="gap-1 text-xs">
                            <Brain className="h-3 w-3" />
                            AI Assessed
                          </Badge>
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => setSelectedReport(report)}
                          >
                            <ImageIcon className="h-4 w-4 sm:mr-2" />
                            <span className="hidden sm:inline">View Image</span>
                          </Button>
                        </div>
                      </div>
                      <CardDescription className="text-xs sm:text-sm">
                        Uploaded on {new Date(report.uploadDate).toLocaleDateString()} by Dr. {report.uploadedBy}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="p-3 sm:p-4 bg-gray-50 rounded-lg">
                        <h4 className="font-medium mb-2 text-sm sm:text-base">Next Steps</h4>
                        <p className="text-xs sm:text-sm text-muted-foreground">
                          {getNextSteps(report.riskScore)}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </TabsContent>

          <TabsContent value="faq" className="space-y-3 sm:space-y-4">
            <Card>
              <CardHeader className="pb-4">
                <CardTitle className="text-lg sm:text-xl">Frequently Asked Questions</CardTitle>
                <CardDescription>Common questions about your medical reports and risk assessments</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3 sm:space-y-4">
                {faqItems.map((item, index) => (
                  <div key={index} className="border rounded-lg">
                    <button
                      onClick={() => setExpandedFaq(expandedFaq === index ? null : index)}
                      className="flex items-center justify-between w-full p-3 sm:p-4 text-left hover:bg-gray-50 transition-colors rounded-lg"
                    >
                      <span className="font-medium text-sm sm:text-base pr-2">{item.question}</span>
                      <HelpCircle className={`h-4 w-4 sm:h-5 sm:w-5 flex-shrink-0 transition-transform ${expandedFaq === index ? 'rotate-180' : ''}`} />
                    </button>
                    {expandedFaq === index && (
                      <div className="px-3 pb-3 sm:px-4 sm:pb-4">
                        <p className="text-xs sm:text-sm text-muted-foreground leading-relaxed">
                          {item.answer}
                        </p>
                      </div>
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* Report Detail Dialog */}
      <Dialog open={!!selectedReport} onOpenChange={() => setSelectedReport(null)}>
        <DialogContent className="max-w-lg sm:max-w-3xl lg:max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <div className="flex items-center justify-between">
              <DialogTitle className="text-base sm:text-lg">
                {selectedReport?.studyType || 'X-Ray Report'}
              </DialogTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedReport(null)}
                className="h-6 w-6 p-0"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </DialogHeader>
          {selectedReport && (
            <div className="space-y-4">
              <div className="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-4 pb-4 border-b">
                <Badge className={getRiskColor(selectedReport.riskScore)}>
                  {getRiskIcon(selectedReport.riskScore)}
                  <span className="ml-1 capitalize">{selectedReport.riskScore} Risk</span>
                </Badge>
                <Badge variant="outline" className="gap-1">
                  <Brain className="h-3 w-3" />
                  AI Assessed
                </Badge>
                <div className="text-xs sm:text-sm text-muted-foreground">
                  {new Date(selectedReport.uploadDate).toLocaleDateString()} by Dr. {selectedReport.uploadedBy}
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="bg-gray-50 p-3 sm:p-4 rounded-lg">
                  <h4 className="font-medium mb-2 text-sm sm:text-base">Recommended Next Steps</h4>
                  <p className="text-xs sm:text-sm text-muted-foreground">
                    {getNextSteps(selectedReport.riskScore)}
                  </p>
                </div>
                
                <div className="space-y-2">
                  <h4 className="font-medium text-sm sm:text-base">Report Image</h4>
                  <div className="relative bg-gray-100 rounded-lg overflow-hidden">
                    <img
                      src={selectedReport.reportImage}
                      alt="Medical report"
                      className="w-full h-auto max-h-[60vh] object-contain"
                    />
                  </div>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}